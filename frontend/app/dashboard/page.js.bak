"use client";
import React, { useState, useEffect } from "react";
import toast from "react-hot-toast";
import { useRouter } from 'next/navigation';
import { getAuth, onAuthStateChanged } from "firebase/auth";
import Image from 'next/image';

const DEPARTMENTS = ["CSE", "ECE", "ME", "CE", "EE", "Other"];
const YEARS = ["1st", "2nd", "3rd", "4th"];

export default function DashboardPage() {
  const [profile, setProfile] = useState({
    name: "",
    email: "",
    phone: "",
    age: "",
    department: "",
    year: "",
    branch: "",
    semester: "",
    profileImage: "",
    hostelName: ""
  });
  const [activeTab, setActiveTab] = useState('personal');
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const router = useRouter();

  // Auth check and fetch profile
  useEffect(() => {
    const auth = getAuth();
    const unsub = onAuthStateChanged(auth, async (user) => {
      if (!user) {
        router.replace("/login");
        return;
      }
      const token = await user.getIdToken();
      const res = await fetch("http://localhost:5000/api/v1/user-profile", {
        headers: { Authorization: `Bearer ${token}` }
      });
      if (res.ok) {
        const data = await res.json();
        setProfile({
          name: data.name || "",
          email: data.email || user.email || "",
          phone: data.phone || "",
          age: data.age?.toString() || "",
          department: data.department || "",
          year: data.year || "",
          hostelName: data.hostelName || "",
          profileImage: data.profileImage || "",
        });
      } else {
        setProfile({
          name: "",
          email: user.email || "",
          phone: "",
          age: "",
          department: "",
          year: "",
          hostelName: "",
          profileImage: "",
        });
      }
      setLoading(false);
    });
    return () => unsub();
  }, [router]);

  // Validation
  const validate = () => {
    const errs = {};
    if (!profile.name.trim()) errs.name = "Name is required.";
    if (!profile.phone.match(/^\d{10}$/)) errs.phone = "Mobile number must be exactly 10 digits.";
    if (profile.age && Number(profile.age) < 16) errs.age = "Age must be at least 16.";
    if (!profile.department) errs.department = "Department is required.";
    if (!profile.year) errs.year = "Year is required.";
    return errs;
  };

  // Handle image upload
  const handleProfilePicChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        setProfile((prev) => ({ ...prev, profileImage: reader.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  // Save profile
  const handleSaveProfile = async (e) => {
    e.preventDefault();
    const errs = validate();
    setErrors(errs);
    if (Object.keys(errs).length > 0) return;
    setSaving(true);
    try {
      const auth = getAuth();
      const user = auth.currentUser;
      const token = user && await user.getIdToken();
      if (!token) {
        toast.error("You must be logged in to save your profile.");
        return;
      }
      const res = await fetch("http://localhost:5000/api/v1/user-profile", {
        method: 'PUT',
        headers: { 
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(profile)
      });
      if (res.ok) {
        toast.success('Profile updated successfully!');
      } else {
        throw new Error('Failed to update profile');
      }
    } catch (error) {
      console.error('Error saving profile:', error);
      toast.error('Failed to save profile. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <div>Loading...</div>;

  const avatar = profile.profileImage || '/default-avatar.png';
  const listingsSummary = {
    posted: 5, // Example data
    purchased: 3, // Example data
    saved: 2 // Example data
  };

  return (
    <div className="dashboard-root">
      <aside className="dashboard-sidebar">
        <div className="sidebar-profile-pic-wrapper">
          <label className="sidebar-profile-pic-label">
            <img 
              src={avatar} 
              alt="Profile" 
              className="sidebar-profile-pic"
              onClick={() => document.getElementById('profilePicInput').click()}
            />
            <span className="sidebar-edit-pic">Edit Photo</span>
            <input 
              type="file" 
              id="profilePicInput" 
              accept="image/*" 
              style={{ display: 'none' }}
              onChange={handleProfilePicChange}
            />
          </label>
        </div>
        <div className="sidebar-profile-info">
          <span className="sidebar-profile-name">{profile.name}</span>
          <span className="sidebar-profile-email">{profile.email}</span>
          <span className="sidebar-verified">âœ“ Verified</span>
        </div>
        <button 
          className="sidebar-logout-btn" 
          onClick={() => {
            const auth = getAuth();
            auth.signOut().then(() => router.replace('/login'));
          }}
        >
          Logout
        </button>
      </aside>
      <main className="dashboard-main">
        <div className="dashboard-tabs">
          <button 
            className={`dashboard-tab-btn ${activeTab === 'personal' ? 'active' : ''}`}
            onClick={() => setActiveTab('personal')}
          >
            Personal Info
          </button>
          <button 
            className={`dashboard-tab-btn ${activeTab === 'listings' ? 'active' : ''}`}
            onClick={() => setActiveTab('listings')}
          >
            My Listings
          </button>
          <button 
            className={`dashboard-tab-btn ${activeTab === 'settings' ? 'active' : ''}`}
            onClick={() => setActiveTab('settings')}
          >
            Settings
          </button>
        </div>
        
            <div className="dashboard-personal-info">
              <form onSubmit={handleSaveProfile} className="personal-info-form">
                <div className="form-row">
                  <label>Full Name</label>
                  <input 
                    type="text" 
                    value={profile.name} 
                    onChange={e => setProfile({ ...profile, name: e.target.value })} 
                    placeholder="Enter your full name"
                  />
                  {errors.name && <div className="error-text">{errors.name}</div>}
                </div>
                <div className="form-group">
                  <label>Email</label>
                  <input 
                    type="email" 
                    value={profile.email} 
                    readOnly 
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label>Mobile Number</label>
                  <input 
                    type="tel" 
                    value={profile.phone} 
                    onChange={e => setProfile({ ...profile, phone: e.target.value })} 
                    className="form-input"
                  />
                  {errors.phone && <div className="error-text">{errors.phone}</div>}
                </div>
                <div className="form-group">
                  <label>Age</label>
                  <input 
                    type="number" 
                    value={profile.age} 
                    onChange={e => setProfile({ ...profile, age: e.target.value })} 
                    className="form-input"
                  />
                  {errors.age && <div className="error-text">{errors.age}</div>}
                </div>
                <div className="form-group">
                  <label>Gender</label>
                  <select 
                    value={profile.gender} 
                    onChange={e => setProfile({ ...profile, gender: e.target.value })} 
                    className="form-input"
                  >
                    <option value="">Select</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Department</label>
                  <select 
                    value={profile.department} 
                    onChange={e => setProfile({ ...profile, department: e.target.value })} 
                    className="form-input"
                  >
                    <option value="">Select</option>
                    {DEPARTMENTS.map(dep => (
                      <option key={dep} value={dep}>{dep}</option>
                    ))}
                  </select>
                  {errors.department && <div className="error-text">{errors.department}</div>}
                </div>
                <div className="form-group">
                  <label>Branch</label>
                  <input 
                    type="text" 
                    value={profile.branch} 
                    onChange={e => setProfile({ ...profile, branch: e.target.value })} 
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <label>Year</label>
                  <select 
                    value={profile.year} 
                    onChange={e => setProfile({ ...profile, year: e.target.value })} 
                    className="form-input"
                  >
                    <option value="">Select</option>
                    {YEARS.map(year => (
                      <option key={year} value={year}>{year}</option>
                    ))}
                  </select>
                </div>
                <div className="form-group">
                  <label>Semester</label>
                  <select 
                    value={profile.semester} 
                    onChange={e => setProfile({ ...profile, semester: e.target.value })} 
                    className="form-input"
                  >
                    <option value="">Select</option>
                    <option value="1">1st</option>
                    <option value="2">2nd</option>
                    <option value="3">3rd</option>
                    <option value="4">4th</option>
                    <option value="5">5th</option>
                    <option value="6">6th</option>
                    <option value="7">7th</option>
                    <option value="8">8th</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Hostel Name</label>
                  <input 
                    type="text" 
                    value={profile.hostelName} 
                    onChange={e => setProfile({ ...profile, hostelName: e.target.value })} 
                    className="form-input"
                  />
                </div>
                <button 
                  type="submit" 
                  className="save-btn" 
                  disabled={saving}
                >
                  {saving ? 'Saving...' : 'Save Changes'}
                </button>
              </form>
            <div className="listings-summary">
              <div className="summary-card">
                <div className="card-icon">âœ…</div>
                <div className="card-content">
                  <span className="card-title">Listings Posted</span>
                  <span className="card-number">{listingsSummary.posted}</span>
                </div>
              </div>
              <div className="summary-card">
                <div className="card-icon">ðŸ›’</div>
                <div className="card-content">
                  <span className="card-title">Items Purchased</span>
                  <span className="card-number">{listingsSummary.purchased}</span>
                </div>
              </div>
              <div className="summary-card">
                <div className="card-icon">ðŸ“Œ</div>
                <div className="card-content">
                  <span className="card-title">Saved Listings</span>
                  <span className="card-number">{listingsSummary.saved}</span>
                </div>
              </div>
            </div>
          </Tab>
          <Tab eventKey="listings" title="Listings">
            <div className="notifications-list">
              <div className="notification-item">
                <span className="notification-icon">ðŸ””</span>
                <span className="notification-text">Your notes listing received 3 new views</span>
              </div>
              <div className="notification-item">
                <span className="notification-icon">ðŸŽ‰</span>
                <span className="notification-text">Campus Bazaar Fest Clearance sale starts tomorrow!</span>
              </div>
            </div>
          </Tab>
          <Tab eventKey="settings" title="Settings">
            <div className="settings-section">
              <div className="form-group">
                <label>Change Password</label>
                <input 
                  type="password" 
                  placeholder="New Password" 
                  className="form-input"
                />
              </div>
              <div className="form-group">
                <label>Change Email (Optional)</label>
                <input 
                  type="email" 
                  placeholder="New Email" 
                  className="form-input"
                />
              </div>
              <button 
                className="delete-account-btn" 
                onClick={() => {/* Show confirmation modal */}}
              >
                Delete Account
              </button>
            </div>
          </Tab>
        </Tabs>
      </main>
    </div>
  );
}